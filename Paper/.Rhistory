Remove values outside of the 2.5% and 97.5% quantiles
Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer3 <- ddply(ModelParty.ev3, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer3 <- ddply(ModelParty.evPer3, .(variable), transform, Upper = value > quantile(value, c(0.975)))
Remove variables outside of the middle 95%
ModelParty.evPer3 <- subset(ModelParty.evPer3, Lower == FALSE & Upper == FALSE)
Quarter 4 ##
# Set fitted values, all variables other than pres_party set to their means
ModelParty4 <- setx(PL.35.4, pres_party = pres_party.r)
Simulate quantities of interest
ModelParty.sim4 <- sim(PL.35.4, x = ModelParty4)
Extract expected values from simulations
ModelParty.ev4 <- ModelParty.sim4$qi
ModelParty.ev4 <-data.frame(ModelParty.ev4$ev)
names(ModelParty.ev4) <- c("Rep", "Dem")
ModelParty.ev4 <- melt(ModelParty.ev4, measure = 1:2)
ModelParty.ev4$variable <- factor(ModelParty.ev4$variable)
ModelParty.ev4$QrtEstimate <- 4
Remove values outside of the 2.5% and 97.5% quantiles
Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer4 <- ddply(ModelParty.ev4, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer4 <- ddply(ModelParty.evPer4, .(variable), transform, Upper = value > quantile(value, c(0.975)))
Remove variables outside of the middle 95%
ModelParty.evPer4 <- subset(ModelParty.evPer4, Lower == FALSE & Upper == FALSE)
Quarter 5 ##
# Set fitted values, all variables other than pres_party set to their means
ModelParty5 <- setx(PL.35.5, pres_party = pres_party.r)
Simulate quantities of interest
ModelParty.sim5 <- sim(PL.35.5, x = ModelParty5)
Extract expected values from simulations
ModelParty.ev5 <- ModelParty.sim5$qi
ModelParty.ev5 <-data.frame(ModelParty.ev5$ev)
names(ModelParty.ev5) <- c("Rep", "Dem")
ModelParty.ev5 <- melt(ModelParty.ev5, measure = 1:2)
ModelParty.ev5$variable <- factor(ModelParty.ev5$variable)
ModelParty.ev5$QrtEstimate <- 5
Remove values outside of the 2.5% and 97.5% quantiles
Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer5 <- ddply(ModelParty.ev5, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer5 <- ddply(ModelParty.evPer5, .(variable), transform, Upper = value > quantile(value, c(0.975)))
Remove variables outside of the middle 95%
ModelParty.evPer5 <- subset(ModelParty.evPer5, Lower == FALSE & Upper == FALSE)
ModelPartyAll <- rbind(ModelParty.evPer0, ModelParty.evPer1,
ModelParty.evPer2, ModelParty.evPer3, ModelParty.evPer4, ModelParty.evPer5)
Plot expected values
ModelPartyPlotAll <- ggplot(data = ModelPartyAll, aes(QrtEstimate, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = variable), colour = "grey70") +
facet_grid(~ variable) +
geom_point(aes(colour = variable), alpha = I(0.05), size = 3) +
scale_color_manual(values = partisan.colors,
name = "") + # partisan.colors defined in the main .Rnw file
scale_x_reverse() +
scale_y_continuous(breaks = c(-0.5, -0.25, 0, 0.25),
labels = c(-0.5, -0.25, 0, 0.25)) +
xlab("\n Age of Forecast in Quarters") +
ylab("Expected Standardized Forecast Error \n") +
guides(colour = guide_legend(override.aes = list(alpha = 1), reverse = TRUE)) +
theme_bw(base_size = 12)
print(ModelPartyPlotAll)
library(devtools)
ActualForeURL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/ActualVsForecastGraph.R"
source_url(ActualForeURL)
source_url("https://raw.github.com/christophergandrud/GreenBook/master/Analysis/DiffOfMeanForecastErrors.R")
absInflation <- qplot(Quarter, value, geom = "line", data = cpi.abs, color = variable, linetype = variable) +
xlab("") + ylab("Inflation\n") +
scale_color_manual(values = absolute.colors, name = "") +
scale_linetype(name = "") +
scale_x_continuous(limits = c(1968, 2007),
breaks = c(1970, 1980, 1990, 2000, 2007),
labels = c(1970, 1980, 1990, 2000, 2007)) +
geom_vline(aes(xintercept = 1996), linetype = "dotted", colour = "grey50") +
annotate(as = "text", x = 2001, y = 8.5, label = "FRB/Global", colour = "grey50") +
geom_vline(aes(xintercept = 1975), linetype = "dotted", colour = "grey50") +
annotate("text", x = 1978, y = 1.5, label = "SEM", colour = "grey50") +
theme_bw(base_size = 12)
print(absInflation)
absInflation <- qplot(Quarter, value, geom = "line", data = cpi.abs, color = variable, linetype = variable) +
xlab("") + ylab("Inflation\n") +
scale_color_manual(values = absolute.colors, name = "") +
scale_linetype(name = "") +
scale_x_continuous(limits = c(1968, 2007),
breaks = c(1970, 1980, 1990, 2000, 2007),
labels = c(1970, 1980, 1990, 2000, 2007)) +
geom_vline(aes(xintercept = 1996), linetype = "dotted", colour = "grey50") +
annotate("text", x = 2001, y = 8.5, label = "FRB/Global", colour = "grey50") +
geom_vline(aes(xintercept = 1975), linetype = "dotted", colour = "grey50") +
annotate("text", x = 1978, y = 1.5, label = "SEM", colour = "grey50") +
theme_bw(base_size = 12)
print(absInflation)
# Run graph source code
PartisanErrorURL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/ErrorPresPartyGraph.R"
source_url(PartisanErrorURL)
# Run main analysis source code
AnalysisURL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/MainAnalysis2.R"
source_url(AnalysisURL)
# Local
#source("/git_repositories/GreenBook/Analysis/MainAnalysis2.R")
# source("/git_repositories/GreenBook/Analysis/BasicAnalysisCoefPlots.R")
# Create plots
CoefPlotsURL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/BasicAnalysisCoefPlots.R"
source_url(CoefPlotsURL)
source_url("https://raw.github.com/christophergandrud/GreenBook/master/Analysis/CompareQuarterEstimates.R")
warnings()
setwd("/git_repositories/GreenBook/Paper/")
source_url("https://raw.github.com/christophergandrud/GreenBook/master/Analysis/CompareQuarterEstimates.R")
EL8 <- zelig(error.prop.deflator.q2 ~ pres_party*time_to_election + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel, model = "ls", data = cpi.Mdf.election, cite = FALSE)
summary(EL8)
NL8 <- zelig(error.prop.deflator.q2 ~ pres_party*time_to_election + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel, model = "ls", data = cpi.data2, cite = FALSE)
summary(NL8)
PL8 <- zelig(error.prop.deflator.q2 ~ pres_party*time_to_election + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel, model = "ls", data = cpi.Mdf.party, cite = FALSE)
summary(PL8)
election_time <- 0:10
# Set fitted values
NL8SetElectionDem <- setx(NL8, pres_party = 1, ElectionPeriod = election_time)
NL8SetElectionRep <- setx(NL8, pres_party = 0, ElectionPeriod = election_time)
NL8SimElectionDem <- sim(NL8, x = NL8SetElectionDem)
NL8SimElectionRep <- sim(NL8, x = NL8SetElectionRep)
# Extract expected values from simulations (Election)
NL8ElectionDem.ev <- NL8ElectionDem$qi
NL8SimElectionDem <- sim(NL8, x = NL8SetElectionDem)
NL8SimElectionRep <- sim(NL8, x = NL8SetElectionRep)
# Extract expected values from simulations (Election)
NL8SimElectionDem.ev <- NL8SimElectionDem$qi
names(NL8SimElectionDem)
names(NL8SimElectionDem.ev)
viewData(NL8SetElectionDem)
election_time <- c(0:10)
fix(election_time)
election_time <- 0:10
election_time
election_time <- 0:10
# Set fitted values
NL8SetElectionDem <- setx(NL8, pres_party = 1, ElectionPeriod = election_time)
NL8SimElectionDem <- sim(NL8, x = NL8SetElectionDem)
NL8SimElectionDem.ev <-data.frame(NL8SimElectionDem.ev$ev)
viewData(NL8SimElectionDem.ev)
NL8SimElectionDem.ev <- NL8SimElectionDem$qi
NL8SimElectionDem.ev <-data.frame(NL8SimElectionDem.ev$ev)
election_time <- c(0:10)
NL8SetElectionDem <- setx(NL8, pres_party = 1, ElectionPeriod = election_time)
NL8SetElectionRep <- setx(NL8, pres_party = 0, ElectionPeriod = election_time)
# Simulate expected values.
NL8SimElectionDem <- sim(NL8, x = NL8SetElectionDem)
NL8SimElectionRep <- sim(NL8, x = NL8SetElectionRep)
NL8SimElectionDem.ev <- NL8SimElectionDem$qi
NL8SimElectionDem.ev <-data.frame(NL8SimElectionDem.ev$ev)
leg <- read.csv("http://dl.dropbox.com/u/12581470/code/Replicability_code/Leg_Violence/Gandrud_leg_violence_ggplot_example.csv")
## List of variables included in the rare event logistic regression
vars <- c("country", "year", "violence", "DemAge", "maj", "HighProp", "tenshort")
## Subset data to only include complete cases
leg.comp <- leg[complete.cases(leg[vars]),]
## Run rare event logistic regression.
## Note the regression uses prior correction (tau) with the full sample and 72 incidences of observed violence (see King and Zeng 2002). Also I used WEAVE robust standard errors (see Lumley and Heagrty 1999).
Model <- zelig(violence ~ DemAge + maj + HighProp + tenshort, model = "relogit", data = leg.comp, tau = 72/4224, robust = list(method = "weave"))
## Ranges of fitted values
HighProp.r <- c(0, 1)
dem.r <- 0:85
maj.r <- c(20:100)
############# Create Individual Variable Plots #################
### Age of Democracy ###
# Set fitted values
Model.DemAge <-setx(Model, DemAge = dem.r)
viewData(Model.DemAge)
NL8SetElectionDem <- setx(NL8, ElectionPeriod = election_time)
NL8SetElectionDem <- setx(NL8, ElectionPeriod = election_time)
election_time <- 0:10
NL8SetElectionDem <- setx(NL8, pres_party = 1, time_to_election = election_time)
viewData(NL8SetElectionDem)
NL8SetElectionRep <- setx(NL8, pres_party = 0, time_to_election = election_time)
# Simulate expected values.
NL8SimElectionDem <- sim(NL8, x = NL8SetElectionDem)
NL8SimElectionRep <- sim(NL8, x = NL8SetElectionRep)
NL8SimElectionDem.ev <- NL8SimElectionDem$qi
NL8SimElectionDem.ev <-data.frame(NL8SimElectionDem.ev$ev)
viewData(NL8SimElectionDem.ev)
names(NL8SimElectionDem.ev) <- c("zero", "one", "two", "three", "four", "five", "six", "seven", "eight". "nine", "ten")
names(NL8SimElectionDem.ev) <- c("zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten")
viewData(NL8SetElectionRep)
viewData(NL8SimElectionDem.ev)
NL8SimElectionDem.ev <- melt(NL8SimElectionDem.ev, measure = 1:11)
viewData(NL8SimElectionDem.ev)
NL8SimElectionDem.ev$Party <- "Dem"
NL8SimElectionRep.ev <- NL8SimElectionRep$qi
NL8SimElectionRep.ev <-data.frame(NL8SimElectionRep.ev$ev)
names(NL8SimElectionRep.ev) <- c("zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten")
NL8SimElectionRep.ev <- melt(NL8SimElectionRep.ev, measure = 1:11)
NL8SimElectionRep.ev$Party <- "Rep"
NL8SimElectionDem.ev <- NL8SimElectionDem$qi
NL8SimElectionDem.ev <-data.frame(NL8SimElectionDem.ev$ev)
names(NL8SimElectionDem.ev) <- c("x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")
NL8SimElectionDem.ev <- melt(NL8SimElectionDem.ev, measure = 1:11)
NL8SimElectionDem.ev$variable <- gsub("x", "", NL8SimElectionDem.ev$variable)
NL8SimElectionDem.ev$Party <- "Dem"
viewData(NL8SimElectionDem.ev)
NL8SimElectionDem.ev <- NL8SimElectionDem$qi
NL8SimElectionDem.ev <-data.frame(NL8SimElectionDem.ev$ev)
names(NL8SimElectionDem.ev) <- c("x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")
NL8SimElectionDem.ev <- melt(NL8SimElectionDem.ev, measure = 1:11)
NL8SimElectionDem.ev$variable <- as.numeric(gsub("x", "", NL8SimElectionDem.ev$variable))
NL8SimElectionDem.ev$Party <- "Dem"
# Extract expected values from simulations (ElectionRep)
NL8SimElectionRep.ev <- NL8SimElectionRep$qi
NL8SimElectionRep.ev <-data.frame(NL8SimElectionRep.ev$ev)
names(NL8SimElectionRep.ev) <- c("x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")
NL8SimElectionRep.ev <- melt(NL8SimElectionRep.ev, measure = 1:11)
NL8SimElectionRep.ev$variable <- as.numeric(gsub("x", "", NL8SimElectionRep.ev$variable))
NL8SimElectionRep.ev$Party <- "Rep"
NL8Bound <- rbind(NL8SimElectionRep.ev, NL8SimElectionDem.ev)
viewData(NL8SimElectionDem.ev)
NL8SimElectionDem.ev <- ddply(NL8SimElectionDem.ev, .(variable, value), transform, Lower = value < quantile(value, c(0.025)))
NL8SimElectionDem.ev <- ddply(NL8SimElectionDem.ev, .(variable, value), transform, Upper = value > quantile(value, c(0.975)))
NL8SimElectionDem.ev <- subset(NL8SimElectionDem.ev, Lower == FALSE & Upper == FALSE)
NL8SimElectionDem.ev <- subset(NL8SimElectionDem.ev, Lower == FALSE & Upper == FALSE)
viewData(NL8SimElectionDem.ev)
NL8SimElectionDem.ev <- ddply(NL8SimElectionDem.ev, .(variable), transform, Lower = value < quantile(value, c(0.025)))
NL8SimElectionDem.ev <- ddply(NL8SimElectionDem.ev, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
NL8SimElectionDem.ev <- subset(NL8SimElectionDem.ev, Lower == FALSE & Upper == FALSE)
NL8SimElectionRep.ev <- ddply(NL8SimElectionRep.ev, .(variable), transform, Lower = value < quantile(value, c(0.025)))
NL8SimElectionRep.ev <- ddply(NL8SimElectionRep.ev, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
NL8SimElectionRep.ev <- subset(NL8SimElectionRep.ev, Lower == FALSE & Upper == FALSE)
# Append both sets of simulation results
NL8Bound <- rbind(NL8SimElectionDem.ev, NL8SimElectionRep.ev)
ElectionInteractionPlot <- ggplot(data = NL8BoundPer, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
#scale_y_continuous(limits = c(-0.75, 0.75),
#                   breaks = c(-0.5, 0, 0.5),
#                   labels = c(-0.5, 0, 0.5)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colour) +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
ElectionInteractionPlot <- ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
#scale_y_continuous(limits = c(-0.75, 0.75),
#                   breaks = c(-0.5, 0, 0.5),
#                   labels = c(-0.5, 0, 0.5)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colour) +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
ElectionInteractionPlot
ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
#scale_y_continuous(limits = c(-0.75, 0.75),
#                   breaks = c(-0.5, 0, 0.5),
#                   labels = c(-0.5, 0, 0.5)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colours) +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
partisan.colors = c("Rep" = "#C42B00", "Dem" = "#2259B3")
ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
#scale_y_continuous(limits = c(-0.75, 0.75),
#                   breaks = c(-0.5, 0, 0.5),
#                   labels = c(-0.5, 0, 0.5)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
ElectionInteractionPlot <- ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
#scale_y_continuous(limits = c(-0.75, 0.75),
#                   breaks = c(-0.5, 0, 0.5),
#                   labels = c(-0.5, 0, 0.5)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(override.aes = list(alpha = 1), name = "")) +
theme_bw(base_size = 11)
ElectionInteractionPlot <- ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
#scale_y_continuous(limits = c(-0.75, 0.75),
#                   breaks = c(-0.5, 0, 0.5),
#                   labels = c(-0.5, 0, 0.5)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors, name = "") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
ElectionInteractionPlot <- ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
#scale_y_continuous(limits = c(-0.75, 0.75),
#                   breaks = c(-0.5, 0, 0.5),
#                   labels = c(-0.5, 0, 0.5)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors, name = "Pres Party") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
#scale_y_continuous(limits = c(-0.75, 0.75),
#                   breaks = c(-0.5, 0, 0.5),
#                   labels = c(-0.5, 0, 0.5)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(title = NULL, override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
ElectionInteractionPlot <- ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
scale_y_reverse(breaks = c(10, 8, 6, 4, 2, 0))
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(title = NULL, override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
theme_bw(base_size = 11)
theme_bw(base_size = 11)
ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
scale_y_reverse(breaks = c(10, 8, 6, 4, 2, 0)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(title = NULL, override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
scale_x_reverse(breaks = c(10, 8, 6, 4, 2, 0)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(title = NULL, override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
NL8 <- zelig(error.prop.deflator.q2 ~ pres_party*(time_to_election^2) + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel, model = "ls", data = cpi.data2, cite = FALSE)
NL9 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + DebtGDP + time_to_election + Chair + ExpenditureGDP + PotentialGDP + DiscountRate2qChange, model = "ls", data = cpi.data2, cite = FALSE)
summary(NL8)
cpi.data2$elect2 <- cpi.data2$time_to_election^2
NL8 <- zelig(error.prop.deflator.q2 ~ pres_party*elect2 + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel, model = "ls", data = cpi.data2, cite = FALSE)
summary(NL8)
cpi.data2$electl <- log(cpi.data2$time_to_election)
NL8 <- zelig(error.prop.deflator.q2 ~ pres_party*electl + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel, model = "ls", data = cpi.data2, cite = FALSE)
cpi.data2$electl <- log(cpi.data2$time_to_election)
NL8 <- zelig(error.prop.deflator.q2 ~ pres_party*electl + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel, model = "ls", data = cpi.data2, cite = FALSE)
cpi.data2$elect2 <- (cpi.data2$time_to_election)^2
NL8 <- zelig(error.prop.deflator.q2 ~ pres_party*elect2 + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel, model = "ls", data = cpi.data2, cite = FALSE)
################
# President*Election Interaction Graph
# Christopher Gandrud
# Updated 2 November 2012
################
# Create range of values to simulate expected values across
election_time <- 0:10
# Set fitted values
NL8SetElectionDem <- setx(NL8, pres_party = 1, time_to_election = election_time)
NL8SetElectionRep <- setx(NL8, pres_party = 0, time_to_election = election_time)
# Simulate expected values.
NL8SimElectionDem <- sim(NL8, x = NL8SetElectionDem)
NL8SimElectionRep <- sim(NL8, x = NL8SetElectionRep)
# Extract expected values from simulations (Democratic President)
NL8SimElectionDem.ev <- NL8SimElectionDem$qi
NL8SimElectionDem.ev <-data.frame(NL8SimElectionDem.ev$ev)
names(NL8SimElectionDem.ev) <- c("x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")
NL8SimElectionDem.ev <- melt(NL8SimElectionDem.ev, measure = 1:11)
NL8SimElectionDem.ev$variable <- as.numeric(gsub("x", "", NL8SimElectionDem.ev$variable))
NL8SimElectionDem.ev$Party <- "Dem"
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
NL8SimElectionDem.ev <- ddply(NL8SimElectionDem.ev, .(variable), transform, Lower = value < quantile(value, c(0.025)))
NL8SimElectionDem.ev <- ddply(NL8SimElectionDem.ev, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
NL8SimElectionDem.ev <- subset(NL8SimElectionDem.ev, Lower == FALSE & Upper == FALSE)
# Extract expected values from simulations (ElectionRep)
NL8SimElectionRep.ev <- NL8SimElectionRep$qi
NL8SimElectionRep.ev <-data.frame(NL8SimElectionRep.ev$ev)
names(NL8SimElectionRep.ev) <- c("x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")
NL8SimElectionRep.ev <- melt(NL8SimElectionRep.ev, measure = 1:11)
NL8SimElectionRep.ev$variable <- as.numeric(gsub("x", "", NL8SimElectionRep.ev$variable))
NL8SimElectionRep.ev$Party <- "Rep"
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
NL8SimElectionRep.ev <- ddply(NL8SimElectionRep.ev, .(variable), transform, Lower = value < quantile(value, c(0.025)))
NL8SimElectionRep.ev <- ddply(NL8SimElectionRep.ev, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
NL8SimElectionRep.ev <- subset(NL8SimElectionRep.ev, Lower == FALSE & Upper == FALSE)
# Append both sets of simulation results
NL8Bound <- rbind(NL8SimElectionDem.ev, NL8SimElectionRep.ev)
#### Create plots ####
ElectionInteractionPlot <- ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
scale_x_reverse(breaks = c(10, 8, 6, 4, 2, 0)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(title = NULL, override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
ElectionInteractionPlot
viewData(NL8Bound)
################
# President*Election Interaction Graph
# Christopher Gandrud
# Updated 2 November 2012
################
# Create range of values to simulate expected values across
election_time <- (0:10)^2
# Set fitted values
NL8SetElectionDem <- setx(NL8, pres_party = 1, elect2 = election_time)
NL8SetElectionRep <- setx(NL8, pres_party = 0, elect2 = election_time)
# Simulate expected values.
NL8SimElectionDem <- sim(NL8, x = NL8SetElectionDem)
NL8SimElectionRep <- sim(NL8, x = NL8SetElectionRep)
# Extract expected values from simulations (Democratic President)
NL8SimElectionDem.ev <- NL8SimElectionDem$qi
NL8SimElectionDem.ev <-data.frame(NL8SimElectionDem.ev$ev)
names(NL8SimElectionDem.ev) <- c("x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")
NL8SimElectionDem.ev <- melt(NL8SimElectionDem.ev, measure = 1:11)
NL8SimElectionDem.ev$variable <- as.numeric(gsub("x", "", NL8SimElectionDem.ev$variable))
NL8SimElectionDem.ev$Party <- "Dem"
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
NL8SimElectionDem.ev <- ddply(NL8SimElectionDem.ev, .(variable), transform, Lower = value < quantile(value, c(0.025)))
NL8SimElectionDem.ev <- ddply(NL8SimElectionDem.ev, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
NL8SimElectionDem.ev <- subset(NL8SimElectionDem.ev, Lower == FALSE & Upper == FALSE)
# Extract expected values from simulations (ElectionRep)
NL8SimElectionRep.ev <- NL8SimElectionRep$qi
NL8SimElectionRep.ev <-data.frame(NL8SimElectionRep.ev$ev)
names(NL8SimElectionRep.ev) <- c("x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")
NL8SimElectionRep.ev <- melt(NL8SimElectionRep.ev, measure = 1:11)
NL8SimElectionRep.ev$variable <- as.numeric(gsub("x", "", NL8SimElectionRep.ev$variable))
NL8SimElectionRep.ev$Party <- "Rep"
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
NL8SimElectionRep.ev <- ddply(NL8SimElectionRep.ev, .(variable), transform, Lower = value < quantile(value, c(0.025)))
NL8SimElectionRep.ev <- ddply(NL8SimElectionRep.ev, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
NL8SimElectionRep.ev <- subset(NL8SimElectionRep.ev, Lower == FALSE & Upper == FALSE)
# Append both sets of simulation results
NL8Bound <- rbind(NL8SimElectionDem.ev, NL8SimElectionRep.ev)
#### Create plots ####
ElectionInteractionPlot <- ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
scale_x_reverse(breaks = c(10, 8, 6, 4, 2, 0)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(title = NULL, override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
ElectionInteractionPlot
ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
scale_x_reverse(breaks = c(10, 8, 6, 4, 2, 0)) +
xlab("\nQuarters to Election") +
ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(title = NULL, override.aes = list(alpha = 1))) +
ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
scale_x_reverse(breaks = c(10, 8, 6, 4, 2, 0)) +
xlab("\nQuarters to Election") +
ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(title = NULL, override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
scale_x_reverse(breaks = c(10, 8, 6, 4, 2, 0)) +
xlab("\nQuarters to Election") +
ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(title = NULL, override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
EL8 <- zelig(error.prop.deflator.q2 ~ pres_party*elect2 + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel, model = "ls", data = cpi.Mdf.election, cite = FALSE)
cpi.data2$elect2 <- (cpi.data2$time_to_election)^2
cpi.Mdf.election$elect2 <- (cpi.Mdf.election$time_to_election)^2
cpi.Mdf.party$elect2 <- (cpi.Mdf.party$time_to_election)^2
NL8 <- zelig(error.prop.deflator.q2 ~ pres_party*elect2 + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel, model = "ls", data = cpi.data2, cite = FALSE)
summary(NL8)
